# Highly divisible triangular number

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

# 76576500

defmodule ProjectEuler.Problem012 do
    def triangle_with_divisors(n) do
        triangle_with_divisors(n, 1, 1, 1)
    end

    def triangle_with_divisors(n, _seq, triangle, divisors) when n <= divisors, do: triangle
    def triangle_with_divisors(n, seq, triangle, _divisors) do
        seq = seq + 1
        new_triangle = triangle + seq
        triangle_with_divisors(n, seq, new_triangle, divisors_count(new_triangle))
    end

    def divisors_count(number) do
        2 * Enum.count(1..round(:math.sqrt(number)), &(rem(number, &1) == 0))
    end
end

IO.inspect ProjectEuler.Problem012.triangle_with_divisors(500)